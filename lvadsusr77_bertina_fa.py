# -*- coding: utf-8 -*-
"""LVADSUSR77-Bertina-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fCuzytBnD5x-ZqIchV3FptRcaPatBaov
"""

import pandas as pd
import numpy as np

#1
data = pd.read_csv('/content/sample_data/final.csv')
print(data.info())

#2
print(data.isnull().sum())
data.fillna(data.mean(), inplace=True)
data.drop_duplicates(inplace=True)

#3
import numpy as np

mean_sales = data['Sales'].mean()
mean_quantity = data['Quantity'].mean()
mean_profit = data['Profit'].mean()

median_sales = data['Sales'].median()
median_quantity = data['Quantity'].median()
median_profit = data['Profit'].median()

mode_sales = data['Sales'].mode()
mode_quantity = data['Quantity'].mode()
mode_profit = data['Profit'].mode()

range_sales = data['Sales'].max() - data['Sales'].min()
range_quantity = data['Quantity'].max() - data['Quantity'].min()
range_profit = data['Profit'].max() - data['Profit'].min()

std_sales = data['Sales'].std()
std_quantity = data['Quantity'].std()
std_profit = data['Profit'].std()

print("Mean:")
print("Sales:", mean_sales)
print("Quantity:", mean_quantity)
print("Profit:", mean_profit)

print("Median:")
print("Sales:", median_sales)
print("Quantity:", median_quantity)
print("Profit:", median_profit)

print("Mode:")
print("Sales:", mode_sales)
print("Quantity:", mode_quantity)
print("Profit:", mode_profit)

print("Range:")
print("Sales:", range_sales)
print("Quantity:", range_quantity)
print("Profit:", range_profit)

print("Standard Deviation:")
print("Sales:", std_sales)
print("Quantity:", std_quantity)
print("Profit:", std_profit)

#4
import matplotlib.pyplot as plt

#linechart
data['Order Date'] = pd.to_datetime(data['Order Date'])
sales = data.groupby('Order Date')[['Sales', 'Profit']].sum().head(15)
plt.figure(figsize=(10, 6))
plt.plot(sales.index, sales['Sales'], label='Sales', color='blue')
plt.plot(sales.index, sales['Profit'], label='Profit', color='green')
plt.xlabel('Order Date')
plt.ylabel('Amount')
plt.title('Sales and Profit Over Time')
plt.legend()
plt.grid(True)
plt.show()

#bar chart
data['Order Date'] = pd.to_datetime(data['Order Date'])
data['Year'] = data['Order Date'].dt.year
yearly_profit = data.groupby('Year')['Profit'].sum().head(15)
plt.figure(figsize=(10, 6))
yearly_profit.plot(kind='bar', color='skyblue')
plt.xlabel('Year')
plt.ylabel('Total Profit')
plt.title('Yearly Profit')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.legend()
plt.show()

#pie chart
category_sales = data.groupby('Category')['Sales'].sum().head(15)
plt.figure(figsize=(15, 8))
plt.pie(category_sales, labels=category_sales.index, autopct='%1.1f%%', startangle=140)
plt.title('Category-wise Sales')
plt.axis('equal')
plt.legend()
plt.show()

#5
correlation_matrix = data.corr()
print(correlation_matrix)

#6

import matplotlib.pyplot as plt
data['Order Date'] = pd.to_datetime(data['Order Date'])
data['Month'] = data['Order Date'].dt.month
plt.figure(figsize=(10, 6))
data.boxplot(column='Sales', by='Month')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.grid(True)

print("from the output we can confer that there is one outlier which is the purchase made for nearly 14000 in the 3rd month.")

#7
print("Trend Analysis\n")
sales_by_date = data.groupby('Order Date')['Sales'].sum()
plt.figure(figsize=(10,10))
sales_by_date.plot(kind = 'line', title='Sales by date',color = "turquoise")
print("There are seasonal peaks and lows which we can see in the line chart")

category_growth = data.groupby('Category')['Sales'].sum().sort_values(ascending=False)
plt.figure(figsize=(10,10))
category_growth.plot(kind = 'line', title='Category Growth',color = "cyan")
print("Chairs is the product category which has shown most growth.")

print("\nCustomer Analysis:")
top_customers = data.groupby('EmailID')['Sales'].agg(['count', 'sum']).nlargest(5, 'sum')
print("Top 5 customers based on total sales:")
print(top_customers)
print()
print("Their behavior is that they're more susceptible to target market and will easily end up buying products.")


data['Order Date'] = pd.to_datetime(data['Order Date'])
data.sort_values(by=['EmailID', 'Order Date'], inplace=True)
data['Time Between Orders'] = data.groupby('EmailID')['Order Date'].diff().dt.days
average_time = data.groupby('EmailID')['Time Between Orders'].mean().head(15)
print("Average time between orders for each customer:")
print(average_time)

"""Comprehensive Analytics:
1. Analyzing sales velocity data can help forecast demand more accurately, allowing suppliers to minimize stockouts and excess inventory, thereby optimizing storage levels and costs.
It will also help the suppliers plan production according therby reducing wastage and errors.

2. We can analyze sales data by region and hence find out the unique nature of movement of product for each locality and thereby focusing on target marketing for each individual region/locality, this will increase sales. We can also identify regions for higher revenue and potential customers in certain regions.


3. We can identify patterns of high value customers by analyzing their data and what is it that makes them buy a particular product - whether it is their product value or quality or brand name or aesthetics or fashion or because of a targeted ad.
We can then send out marketing messages and promotions to these high value customers and even give them good offers and attractive gifts to retain them. We can also strengthen customer relationships and inform them of any sale or offer currently going on and encourage them to repeat their purchases.
We should also provide these high value customers exceptional customer service.
"""